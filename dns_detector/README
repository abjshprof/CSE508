Description:
1) an on-path DNS packet injector, and
2) a passive DNS poisoning attack detector.

PREREQUISITES:
  - python
  - scapy: pip install scapy
  - netifaces and argparser modules : pip install netifaces, argparser

PLATFORM:
 - Ubuntu 16.04 on vmware
 - scapy 2.2.0
 - python 2.7

RUNNING:
  - for dns injection, 
       python2.7 dnsinject.py <options> <expr>
       e.g:  
		python2.7 dnsinject.py  -h hostfile
  - for dns detection, 
	python dnsdetect.py <options> expr
       eg:  
		python2.7 dnsdetect.py

To inject and detect spoof:
 machine1 : python2.7 dnsinject.py  -h hostfile
 machine2: python2.7 dnsdetect.py

 machine2: dig @(high latency dns server) www.google.com


STRUCTURE:
dnsinject.py: 
Injects a spoofed ip in dns queries for hostnames specified in hostfile.
If no hostfile is specified, it injects local ip on all dns queries


dnsdetect.py:
detects whether if a dns response has a spoofed ip.
Method Used:
If two different set of IPs are received for the same query (with same id) then this is a red flag which indicates possible posioning.
But it could be that there are more than one responses for the same query, in this case there could be a false positive. Thus we try to
detect this case by checking if there is any common ip addr in such repsonses with same id. If so, this is likely a valid response.


TESTING:
Pcap file: dnsdetect_pcap
This file contains some spoofed responses for www.google.com

Snippet of Output:
reading offline
('Spoof detected for', 22026)
('names: ', ['www.google.com.'])
('list1:', ['172.217.12.132'])
('list2:', ['10.6.6.6'])
('Spoof detected for', 17623)
('names: ', ['www.google.com.'])
('list1:', ['172.217.7.4'])
('list2:', ['10.6.6.6'])
('Spoof detected for', 10490)
('names: ', ['www.google.com.'])
('list1:', ['172.217.10.100'])
